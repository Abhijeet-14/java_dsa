package _java._4Dynamic_Programing;

import java.util.*;

public class C6_Minimum_Subset_Sum_Diff {

	static boolean t[][];

	public static void main(String[] args) {
		int arr[] = { 1, 6, 11, 5 };
		int n = arr.length;

		int Range = 0;

		for (int val : arr)
			Range += val;

		t = new boolean[n + 1][Range + 1];

		// S1+S2 = Sum Of Array (RANGE)
		// S1-S2 = Minimum difference

		// 2*S1 = Range + Minimum Difference
		// Minimum Difference = Range - 2*S1

		// in bw 0-Range...
		// remove all the number which does not have any subset in arr[]

		// HOW to remove?

		// in n-row of t[][], we have true for only subsets... so.. if true => have
		// subset

		memo(arr, n, Range);

		List<Integer> validNum = new ArrayList<>();
		for (int i = 1; i < Range + 1; i++) {
			// removing NUMBER with No Subset in arr[]
			if (t[n][i] == true)
				validNum.add(i);
		}

		int mn = Integer.MAX_VALUE;

		for (int val : validNum)
			if (mn < Range - (2 * val))
				mn = Range - (2 * val);

		System.out.println(mn);

	}

	private static boolean memo(int[] arr, int n, int range) {
		if (range == 0)
			return true;
		if (n == 0)
			return false;

		if (arr[n - 1] <= range)
			return t[n][range] = memo(arr, n - 1, range - arr[n - 1]) || memo(arr, n - 1, range);

		return t[n][range] = memo(arr, n - 1, range);
	}

}
