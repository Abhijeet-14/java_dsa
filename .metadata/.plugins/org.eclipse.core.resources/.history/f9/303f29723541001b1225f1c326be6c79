package _java._LEETCODE.Graph;
import java.util.*;

// Question: https://leetcode.com/problems/letter-combinations-of-a-phone-number/

// Response: Solved! optimization requires
// OPTIMIZE: 
public class BKTR_1_letter_combinations_of_a_phone_number {
    
	static String a[] = new String[8];
	
	public static void main(String[] args) {
		Scanner sc = new  Scanner(System.in);
		
		String input = sc.nextLine(); 
		
		System.out.println("My Approach:");
		letterCombinations(input);
	}
    
    public static List<String> letterCombinations(String digits) {
        if(digits.length() == 0)
            return new ArrayList<>();
        
        a[0] = "abc";
        a[1] = "def";
        a[2] = "ghi";
        a[3] = "jkl";
        a[4] = "mno";
        a[5] = "pqrs";
        a[6] = "tuv";
        a[7] = "wxyz";
        
        List<String> combi = new ArrayList<>();
        
        String word = "";
        
        int next = 0;
        int in = Character.getNumericValue(digits.charAt(next)) - 2;
        
        for(int i=0; i<a[in].length(); i++)
            dfs(combi, digits, word, i, next, in);
        
        return combi;
    }
    
    public static void dfs(List<String> combi, String digits, String word, int count, int next, int in){
        
        char val = a[in].charAt(count);
        word += val;
                
        if(word.length() == digits.length()){
            combi.add(word);
            return;
        }

        next++;
        in = Character.getNumericValue(digits.charAt(next)) -  2;
        
        for(int i=0; i<a[in].length(); i++)
            dfs(combi, digits, word, i, next, in); 
        
    } 

}
