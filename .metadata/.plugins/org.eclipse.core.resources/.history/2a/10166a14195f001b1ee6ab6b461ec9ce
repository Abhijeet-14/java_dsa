package _java._5BACKTRACKING;

import java.util.*;

public class C5_Suduko {

	static int N;
	static final int[][] mat = new int[N][N];

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		N = sc.nextInt();

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				mat[i][j] = sc.nextInt();
			}
		}

		boolean isSolve = sudokoSol();

		if (isSolve == true) {
			printMatrix(mat);
			System.out.println("Yes, Possible!!");
		} else {
			printMatrix(mat);
			System.out.println("No, Not Possible!!");
		}

	}

	private static boolean sudokoSol() {
		// TODO Auto-generated method stub
		int i, j = 0;
		
		// Find 1st free cell
		for(i=0; i<N; i++) {
			for(j=0; j<N; j++) {
				if(mat[i][j] == 0)
					break;
			}			
		}
		
		// No Empty cell:
		if(i == N && j == N) {
			return true;
		}
		
		
		for(int n=1; n<=N; n++) {
			if(isSafe(i,j,n) == true) {
				mat[i][j] = n;
				if(sudokoSol() == true) {
					return true;
				}
				
				mat[i][j] = 0;
			}
		}
		
		// Current position is Wrong.
		return false;
	}

	private static boolean isSafe(int i, int j, int n) {

		// Check row & col
		for (int k = 0; k < N; k++) {
			if (mat[k][j] == n || mat[i][k] == n)
				return false;
		}

		// check in SUB-grid
		int s = (int) Math.sqrt(N);
		int rowStart = i - (i % s);
		int colStart = j - (j % s);
		for ( i = 0; i < s; i++) {
			for (j = 0; j < s; j++) {
				if(mat[i+rowStart][j+colStart] == n)
					return false;
			}
		}
		
		return true;
	}

	private static void printMatrix(int mat[][]) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				System.out.print(mat[i][j] + " ");
			}
			System.out.println();
		}
	}
}

// 4
// 1 0 3 0
// 0 0 2 1
// 0 1 0 2
// 2 4 0 0