package _java._4Dynamic_Programing;

public class C14__R_Longest_Common_Subsequence {

	static int t[][];
	
	public static void main(String[] args) {
		// In Subsequence letter combination can be DISCONTINOUS
		String a = "abcdefh";
		String b = "abedfcg";
		
		t = new int[a.length() + 1][b.length() + 1];
		
		int ans = LCS_Rec(a, b, a.length(), b.length());
		System.out.println("Recursive: \n" + ans);
		
		int ans1 = LCS_Memo(a, b, a.length(), b.length());
		System.out.println("Recursive: \n" + ans1);
	}

	private static int LCS_Rec(String a, String b, int n, int m) {
		// BASE CONDITION
		if (n == 0 || m == 0)
			return 0;
		// CHOICE DIAGRAM
		if (a.charAt(n - 1) == b.charAt(m - 1)) // MATCH
			return 1 + LCS_Rec(a, b, n - 1, m - 1);
		else // NO MATCH
			return Math.max(LCS_Rec(a, b, n - 1, m), LCS_Rec(a, b, n, m - 1));
	}
	
	private static int LCS_Memo(String a, String b, int n, int m) {
		// BASE CONDITION
		if (n == 0 || m == 0)
			return 0;
		
		if(t[n][m] != -1)
			return t[n][m];
		
		// CHOICE DIAGRAM
		if (a.charAt(n - 1) == b.charAt(m - 1)) // MATCH
			return t[n][m] = 1 + LCS_Memo(a, b, n - 1, m - 1);
		else // NO MATCH
			return t[n][m] = Math.max(LCS_Memo(a, b, n - 1, m), LCS_Memo(a, b, n, m - 1));
	}

}
