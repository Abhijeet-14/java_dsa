package _java._4Dynamic_Programing;

public class C12_Coin_Change_Min_Ways {
	static int t[][];
	public static void main(String[] args) {
		int arr[] = {1, 2, 3, 6};
		
		int m = 12;
		
		int n = arr.length;
		
		t = new int[n+1][m+1];
		
		for(int row[]: t)
			java.util.Arrays.fill(row, -1);
		
		int min_no_of_coins = solve(arr, m, n);
		System.out.println("Memoization: \n" + min_no_of_coins);
	}
	private static int solve(int[] arr, int m, int n) {
		if(n==0)
			return Integer.MAX_VALUE-1;	// when n=0, we can choose INFINTE {} of SUBSET for sum = X
					// MAX_VALUE - 1, bcoz when 1 coin added, it won't cause INTEGER OVERFLOW
		
		if(m == 0 && n != 0)
			return 0;	// when m=0, minimum set is {} from coin set
		
		if(t[n][m] != -1)
			return t[n][m];
		
		if(arr[n-1] <= m)
			return t[n][m] = 1 + Math.min( solve(arr, m - arr[n-1], n), solve(arr, m, n-1));
		
		return solve(arr, m, n-1);
	}
}
