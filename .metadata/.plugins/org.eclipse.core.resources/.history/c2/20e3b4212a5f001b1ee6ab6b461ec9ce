package _java._5BACKTRACKING;

import java.util.*;

/*
 * Problem Statement:
 * Given a N*N board with the Knight placed on the first block of an empty board. 
 * Moving according to the rules of chess knight must visit each square exactly once. 
 * Print the order of each the cell in which they are visited.
 * */
public class C6_Knight_Tour {

	static int N = 8;
	static int board[][] = new int[N][N];

//	static int count = 0;
	public static void main(String[] args) {

		for (int row[] : board) {
			Arrays.fill(row, -1);
		}

		board[0][0] = 0;
		boolean isSolve = knightTour(0, 0, 0);

		if (isSolve) {
			printBoard(board);
			System.out.println("Yes, Possible");
		} else {
			printBoard(board);
			System.out.println("Yes, Possible");
		}
	}

	private static boolean isSafe(int r, int c) {
		
		if (r >= 0 && r < N && c >= 0 && c < N)
			if (board[r][c] == -1)
				return true;

		return false;
	}

	private static boolean knightTour(int row, int col, int count) {
		if (count == N * N)
			return true;

		int arr[] = { -2, 1, 1, 2, 2, -1, -1, -2, -2, -1, -1, 2, 2, 1, 1, -2 };

		for (int i = 0; i < 8; i++) {
			int newRow = row + arr[2 * i];
			int newCol = col + arr[2 * i + 1];
			
			if (isSafe(newRow, newCol)) {
				board[newRow][newCol] = count;

				if (knightTour(newRow, newCol, count+1))
					return true;

				board[newRow][newCol] = -1;
//				return false;
			}
		}
		
		return false;
	}

	private static void printBoard(int[][] board2) {
		for (int i = 0; i < board2.length; i++) {
			for (int j = 0; j < board2[0].length; j++) {
				System.out.print(board2[i][j] + " ");
			}
			System.out.println();
		}
	}

}
