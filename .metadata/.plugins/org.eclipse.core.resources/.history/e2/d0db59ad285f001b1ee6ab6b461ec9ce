package _java._5BACKTRACKING;

import java.util.*;

/*
 * Problem Statement:
 * Given a N*N board with the Knight placed on the first block of an empty board. 
 * Moving according to the rules of chess knight must visit each square exactly once. 
 * Print the order of each the cell in which they are visited.
 * */
public class C6_Knight_Tour {

	static int N = 8;
	static int board[][] = new int[N][N];

//	static int count = 0;
	public static void main(String[] args) {

		for (int row[] : board) {
			Arrays.fill(row, -1);
		}

		boolean isSolve = knightTour(0, 0, -1);

		if (isSolve) {
			printBoard(board);
			System.out.println("Yes, Possible");
		} else {
			printBoard(board);
			System.out.println("Yes, Possible");
		}
	}

	private static boolean isSafe(int r, int c) {
		// it can move..top right bottom left
//		if(r>=N || c>=N)
//			return false;
//		
//		int arr[] = {-2, 1, 1, 2, 2, -1, -1, -2};
//		
//		for(int i=0; i<4; i++) {
//			int row =r+ arr[2*i];
//			int col =c + arr[2*i+1];
//			
		if (r >= 0 && r < N && c >= 0 && c < N)
			if (board[r][c] == -1)
				return true;
//		}

		return false;
	}

	private static boolean knightTour(int row, int col, int count) {
		if (row < 0 && row >= N && col < 0 && col >= N)
			return false;

		if (isSafe(row, col) == true) {
			board[row][col] = count++;

			int arr[] = { -2, 1, 1, 2, 2, -1, -1, -2, -2, -1, -1, 2, 2, 1, 1, -2 };

			for (int i = 0; i < 8; i++)
				if (knightTour(row + arr[2 * i], col + arr[2 * i + 1], count))
					return true;

			board[row][col] = count--;
			return false;
		}

		return false;
	}

	private static void printBoard(int[][] board2) {
		for (int i = 0; i < board2.length; i++) {
			for (int j = 0; j < board2[0].length; j++) {
				System.out.print(board2[i][j] + " ");
			}
			System.out.println();
		}
	}

}
